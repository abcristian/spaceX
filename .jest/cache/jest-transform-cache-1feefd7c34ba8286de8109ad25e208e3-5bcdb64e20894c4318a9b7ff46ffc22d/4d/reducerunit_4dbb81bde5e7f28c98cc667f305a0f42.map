{"version":3,"sources":["reducer.unit.tsx"],"names":["describe","initialState","test","expect","statusReducer","toBeDefined","action","type","testOperation","toStrictEqual","status","PENDING","FULFILLED","payload","detail","expected","REJECTED","toBe"],"mappings":"AAAA;;AAGAA,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC/B,MAAMC,YAAyB,GAAG,EAAlC;AAEAC,EAAAA,IAAI,CAAC,sBAAD,EAAyB,YAAM;AACjCC,IAAAA,MAAM,CAACC,sBAAD,CAAN,CAAsBC,WAAtB;AACD,GAFG,CAAJ;AAIAH,EAAAA,IAAI,CAAC,sCAAD,EAAyC,YAAM;AACjD,QAAMI,MAAM,GAAG,4BAAcL,YAAd,EAA4B;AACzCM,MAAAA,IAAI,EAAE;AADmC,KAA5B,CAAf;AAGAJ,IAAAA,MAAM,CAACG,MAAM,CAACE,aAAR,CAAN,CAA6BC,aAA7B,CAA2C;AAACC,MAAAA,MAAM,EAAEC;AAAT,KAA3C;AACD,GALG,CAAJ;AAOAT,EAAAA,IAAI,CAAC,wCAAD,EAA2C,YAAM;AACnD,QAAMI,MAAM,GAAG,4BAAcL,YAAd,EAA4B;AACzCM,MAAAA,IAAI,EAAE;AADmC,KAA5B,CAAf;AAGAJ,IAAAA,MAAM,CAACG,MAAM,CAACE,aAAR,CAAN,CAA6BC,aAA7B,CAA2C;AAACC,MAAAA,MAAM,EAAEE;AAAT,KAA3C;AACD,GALG,CAAJ;AAOAV,EAAAA,IAAI,CAAC,uCAAD,EAA0C,YAAM;AAClD,QAAMI,MAAM,GAAG,4BAAcL,YAAd,EAA4B;AACzCY,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE;AADD,OADgC;AAIzCP,MAAAA,IAAI,EAAE;AAJmC,KAA5B,CAAf;AAMA,QAAMQ,QAAQ,GAAG;AAACD,MAAAA,MAAM,EAAE,UAAT;AAAqBJ,MAAAA,MAAM,EAAEM;AAA7B,KAAjB;AACAb,IAAAA,MAAM,CAACG,MAAM,CAACE,aAAR,CAAN,CAA6BC,aAA7B,CAA2CM,QAA3C;AACD,GATG,CAAJ;AAWAb,EAAAA,IAAI,CAAC,6BAAD,EAAgC,YAAM;AACxC,QAAMI,MAAM,GAAG,4BAAcL,YAAd,EAA4B;AAACM,MAAAA,IAAI,EAAE;AAAP,KAA5B,CAAf;AACAJ,IAAAA,MAAM,CAACG,MAAD,CAAN,CAAeW,IAAf,CAAoBhB,YAApB;AACD,GAHG,CAAJ;AAID,CApCO,CAAR","sourcesContent":["import {FULFILLED, PENDING, REJECTED, statusReducer} from \"../reducer\";\nimport {StatusState} from \"../typings\";\n\ndescribe(\"Status reducer\", () => {\n  const initialState: StatusState = {};\n\n  test(\"should have a module\", () => {\n    expect(statusReducer).toBeDefined();\n  });\n\n  test(\"should mark testOperation as pending\", () => {\n    const action = statusReducer(initialState, {\n      type: \"testOperation/pending\",\n    });\n    expect(action.testOperation).toStrictEqual({status: PENDING});\n  });\n\n  test(\"should mark testOperation as fulfilled\", () => {\n    const action = statusReducer(initialState, {\n      type: \"testOperation/fulfilled\",\n    });\n    expect(action.testOperation).toStrictEqual({status: FULFILLED});\n  });\n\n  test(\"should mark testOperation as rejected\", () => {\n    const action = statusReducer(initialState, {\n      payload: {\n        detail: \"An error\",\n      },\n      type: \"testOperation/rejected\",\n    });\n    const expected = {detail: \"An error\", status: REJECTED};\n    expect(action.testOperation).toStrictEqual(expected);\n  });\n\n  test(\"should ignore other actions\", () => {\n    const action = statusReducer(initialState, {type: \"not me please\"});\n    expect(action).toBe(initialState);\n  });\n});\n"]}