4732bd3e846b706887f187cd645c59bb
_getJestObj().mock("../api", function () {
  return {
    getLaunchesService: jest.fn().mockResolvedValue({})
  };
});

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var actions = _interopRequireWildcard(require("../actions"));

var _api = require("../api");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _getJestObj() {
  var _require = require("@jest/globals"),
      jest = _require.jest;

  _getJestObj = function _getJestObj() {
    return jest;
  };

  return jest;
}

describe("getLaunches ", function () {
  var dispatch = jest.fn();
  var getState = jest.fn().mockReturnValue({});
  var rejectedWithValue = jest.fn();
  var filter = {
    sort: "asc",
    year: 2016
  };
  test("execute getLaunches", function _callee() {
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regenerator.default.awrap(actions.getLaunches(filter)(dispatch, getState, {}));

          case 2:
            expect(_api.getLaunchesService).toHaveBeenCalled();

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  });
  test("should dispatch getLunchesService", function _callee2() {
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _api.getLaunchesService.mockRejectedValue({
              response: {
                data: "error"
              }
            });

            _context2.next = 3;
            return _regenerator.default.awrap(actions.getLaunches(filter)(dispatch, getState, {
              extraArgument: {
                rejectedWithValue: rejectedWithValue
              }
            }));

          case 3:
            expect(_api.getLaunchesService).toHaveBeenCalled();

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, null, Promise);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjdGlvbnMudW5pdC50c3giXSwibmFtZXMiOlsibW9jayIsImdldExhdW5jaGVzU2VydmljZSIsImplc3QiLCJmbiIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiZGVzY3JpYmUiLCJkaXNwYXRjaCIsImdldFN0YXRlIiwibW9ja1JldHVyblZhbHVlIiwicmVqZWN0ZWRXaXRoVmFsdWUiLCJmaWx0ZXIiLCJzb3J0IiwieWVhciIsInRlc3QiLCJhY3Rpb25zIiwiZ2V0TGF1bmNoZXMiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwibW9ja1JlamVjdGVkVmFsdWUiLCJyZXNwb25zZSIsImRhdGEiLCJleHRyYUFyZ3VtZW50Il0sIm1hcHBpbmdzIjoiQUFJQSxjQUFLQSxJQUFMLENBQVUsUUFBVixFQUFvQjtBQUFBLFNBQU87QUFDekJDLElBQUFBLGtCQUFrQixFQUFFQyxJQUFJLENBQUNDLEVBQUwsR0FBVUMsaUJBQVYsQ0FBNEIsRUFBNUI7QUFESyxHQUFQO0FBQUEsQ0FBcEI7Ozs7OztBQUhBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OztBQU1BQyxRQUFRLENBQUMsY0FBRCxFQUFpQixZQUFNO0FBQzdCLE1BQU1DLFFBQVEsR0FBR0osSUFBSSxDQUFDQyxFQUFMLEVBQWpCO0FBQ0EsTUFBTUksUUFBUSxHQUFHTCxJQUFJLENBQUNDLEVBQUwsR0FBVUssZUFBVixDQUEwQixFQUExQixDQUFqQjtBQUNBLE1BQU1DLGlCQUFpQixHQUFHUCxJQUFJLENBQUNDLEVBQUwsRUFBMUI7QUFFQSxNQUFNTyxNQUFjLEdBQUc7QUFBQ0MsSUFBQUEsSUFBSSxFQUFFLEtBQVA7QUFBY0MsSUFBQUEsSUFBSSxFQUFFO0FBQXBCLEdBQXZCO0FBRUFDLEVBQUFBLElBQUksQ0FBQyxxQkFBRCxFQUF3QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSw4Q0FDcEJDLE9BQU8sQ0FBQ0MsV0FBUixDQUFvQkwsTUFBcEIsRUFBNEJKLFFBQTVCLEVBQXNDQyxRQUF0QyxFQUFnRCxFQUFoRCxDQURvQjs7QUFBQTtBQUUxQlMsWUFBQUEsTUFBTSxDQUFDZix1QkFBRCxDQUFOLENBQTJCZ0IsZ0JBQTNCOztBQUYwQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUF4QixDQUFKO0FBSUFKLEVBQUFBLElBQUksQ0FBQyxtQ0FBRCxFQUFzQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ3ZDWixtQ0FBRCxDQUFrQ2lCLGlCQUFsQyxDQUFvRDtBQUNsREMsY0FBQUEsUUFBUSxFQUFFO0FBQUNDLGdCQUFBQSxJQUFJLEVBQUU7QUFBUDtBQUR3QyxhQUFwRDs7QUFEd0M7QUFBQSw4Q0FJbENOLE9BQU8sQ0FBQ0MsV0FBUixDQUFvQkwsTUFBcEIsRUFBNEJKLFFBQTVCLEVBQXNDQyxRQUF0QyxFQUFnRDtBQUNwRGMsY0FBQUEsYUFBYSxFQUFFO0FBQUNaLGdCQUFBQSxpQkFBaUIsRUFBakJBO0FBQUQ7QUFEcUMsYUFBaEQsQ0FKa0M7O0FBQUE7QUFPeENPLFlBQUFBLE1BQU0sQ0FBQ2YsdUJBQUQsQ0FBTixDQUEyQmdCLGdCQUEzQjs7QUFQd0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBdEMsQ0FBSjtBQVNELENBcEJPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0ZpbHRlcn0gZnJvbSBcIi4uLy4uL2ZpbHRlcnMvcmVkdWNlclwiO1xuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tIFwiLi4vYWN0aW9uc1wiO1xuaW1wb3J0IHtnZXRMYXVuY2hlc1NlcnZpY2V9IGZyb20gXCIuLi9hcGlcIjtcblxuamVzdC5tb2NrKFwiLi4vYXBpXCIsICgpID0+ICh7XG4gIGdldExhdW5jaGVzU2VydmljZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHt9KSxcbn0pKTtcblxuZGVzY3JpYmUoXCJnZXRMYXVuY2hlcyBcIiwgKCkgPT4ge1xuICBjb25zdCBkaXNwYXRjaCA9IGplc3QuZm4oKTtcbiAgY29uc3QgZ2V0U3RhdGUgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHt9KTtcbiAgY29uc3QgcmVqZWN0ZWRXaXRoVmFsdWUgPSBqZXN0LmZuKCk7XG5cbiAgY29uc3QgZmlsdGVyOiBGaWx0ZXIgPSB7c29ydDogXCJhc2NcIiwgeWVhcjogMjAxNn07XG5cbiAgdGVzdChcImV4ZWN1dGUgZ2V0TGF1bmNoZXNcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGFjdGlvbnMuZ2V0TGF1bmNoZXMoZmlsdGVyKShkaXNwYXRjaCwgZ2V0U3RhdGUsIHt9KTtcbiAgICBleHBlY3QoZ2V0TGF1bmNoZXNTZXJ2aWNlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuICB0ZXN0KFwic2hvdWxkIGRpc3BhdGNoIGdldEx1bmNoZXNTZXJ2aWNlXCIsIGFzeW5jICgpID0+IHtcbiAgICAoZ2V0TGF1bmNoZXNTZXJ2aWNlIGFzIGplc3QuTW9jaykubW9ja1JlamVjdGVkVmFsdWUoe1xuICAgICAgcmVzcG9uc2U6IHtkYXRhOiBcImVycm9yXCJ9LFxuICAgIH0pO1xuICAgIGF3YWl0IGFjdGlvbnMuZ2V0TGF1bmNoZXMoZmlsdGVyKShkaXNwYXRjaCwgZ2V0U3RhdGUsIHtcbiAgICAgIGV4dHJhQXJndW1lbnQ6IHtyZWplY3RlZFdpdGhWYWx1ZX0sXG4gICAgfSk7XG4gICAgZXhwZWN0KGdldExhdW5jaGVzU2VydmljZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcbn0pO1xuIl19